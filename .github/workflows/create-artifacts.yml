name: Create artifacts

on:
  workflow_call:
    inputs:
      APP_URL:
        required: true
        type: string
      COMMIT_HASH:
        required: true
        type: string
      SNAPCRAFT_CHANNEL:
        default: stable
        required: false
        type: string
    secrets:
      APPLE_API_KEY_ID:
        required: true
      APPLE_API_ISSUER:
        required: true
      APPLE_API_KEY:
        required: true
      AUTO_UPDATE_URL:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GH_PACKAGES_TOKEN:
        required: true
      OSX_CODE_SIGN_CERT_PASSWORD:
        required: true
      OSX_CODE_SIGN_CERT:
        required: true
      S3_RELEASE_BUCKET:
        required: true
      SNAPCRAFT_TOKEN:
        required: true

jobs:
  create-artifacts:
    strategy:
      matrix:
        os: [macOS-12, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: '20.13.1'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9

      - name: Checkout branch
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ inputs.COMMIT_HASH }}

      - name: Cache node_modules
        uses: actions/cache@v4.0.2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: pnpm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Import Apple API key for app notarization on macOS
      - name: Prepare for app notarization (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.APPLE_API_KEY }}' > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      # Only install Snapcraft on Ubuntu
      - name: Install Snapcraft
        uses: brrian/action-snapcraft@v2.1.2
        if: startsWith(matrix.os, 'ubuntu')
        with:
          channel: ${{ inputs.SNAPCRAFT_CHANNEL }}

      - name: Compile
        uses: brrian/action-electron-builder@v2.2
        env:
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_ID: ${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_KEY: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          S3_RELEASE_BUCKET: ${{ secrets.S3_RELEASE_BUCKET }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
          VITE_APP_ID: ${{ vars.APP_ID }}
          VITE_APP_URL: ${{ inputs.APP_URL }}
          VITE_AUTO_UPDATE_URL: ${{ secrets.AUTO_UPDATE_URL }}
        with:
          build_script_name: build
          args: --config .electron-builder.config.cjs
          github_token: ${{ secrets.github_token }}
          release: true
          max_attempts: 3

          mac_certs: ${{ secrets.OSX_CODE_SIGN_CERT }}
          mac_certs_password: ${{ secrets.OSX_CODE_SIGN_CERT_PASSWORD }}
